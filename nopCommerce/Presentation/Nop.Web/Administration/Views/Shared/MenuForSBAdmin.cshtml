@using Nop.Web.Framework.Menu;
@{
    //load sitemap
    var siteMap = new Nop.Web.Framework.Menu.XmlSiteMap();
    siteMap.LoadFrom("~/Administration/sitemap.config");
}
@helper RenderMenuItem(Nop.Web.Framework.Menu.SiteMapNode item)
{
    string url = null;
    if (!string.IsNullOrEmpty(item.ControllerName) && !string.IsNullOrEmpty(item.ActionName))
    {
        url = Url.Action(item.ActionName, item.ControllerName, item.RouteValues, null, null);
    }
    else if (!string.IsNullOrEmpty(item.Url))
    {
        url = item.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(item.Url) : item.Url;
    }
    <li>
        @if (!String.IsNullOrEmpty(url))
        {
            <a href="@url">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @*<i class="fa fa-bar-chart-o fa-fw"></i>*@ @item.Title<span class="fa arrow"></span>
            </a>
        }
        else
        {
            <a href="#">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @*<i class="fa fa-bar-chart-o fa-fw"></i>*@ @item.Title<span class="fa arrow"></span>
            </a>
        }
        @{
            var childNodes = item.ChildNodes.Where(x => x.Visible).ToList();
        }
        @if (childNodes.Any())
        {
            <ul class="nav nav-second-level">
                @foreach (var childItem in childNodes)
                {
                    @RenderMenuItem2(childItem)
                }
            </ul>
        }
    </li>
}
@helper RenderMenuItem2(Nop.Web.Framework.Menu.SiteMapNode item)
{
    string url = null;
    if (!string.IsNullOrEmpty(item.ControllerName) && !string.IsNullOrEmpty(item.ActionName))
    {
        url = Url.Action(item.ActionName, item.ControllerName, item.RouteValues, null, null);
    }
    else if (!string.IsNullOrEmpty(item.Url))
    {
        url = item.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(item.Url) : item.Url;
    }
    <li>
        @{
            var childNodes = item.ChildNodes.Where(x => x.Visible).ToList();
        }
        @if (!String.IsNullOrEmpty(url))
        {
            <a href="@url">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @item.Title
                @if (childNodes.Any())
                {
                <span class="fa arrow"></span>
                }
            </a>
        }
        else
        {
            <a href="#">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @item.Title
                @if (childNodes.Any())
                {
                <span class="fa arrow"></span>
                }
            </a>
        }
        @if (childNodes.Any())
        {
            <ul class="nav nav-third-level">
                @foreach (var childItem in childNodes)
                {
                    @RenderMenuItem3(childItem)
                }
            </ul>
        }
    </li>
}
@helper RenderMenuItem3(Nop.Web.Framework.Menu.SiteMapNode item)
{
    string url = null;
    if (!string.IsNullOrEmpty(item.ControllerName) && !string.IsNullOrEmpty(item.ActionName))
    {
        url = Url.Action(item.ActionName, item.ControllerName, item.RouteValues, null, null);
    }
    else if (!string.IsNullOrEmpty(item.Url))
    {
        url = item.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(item.Url) : item.Url;
    }
    <li>
        @if (!String.IsNullOrEmpty(url))
        {
            <a href="@url">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @item.Title
            </a>
        }
        else
        {
            <a href="#">
                @if (!String.IsNullOrEmpty(item.IconClass))
                {
                    <text>
                        <img alt="" src="@Url.Content(item.IconClass)" />
                    </text>
                }
                @item.Title
            </a>
        }
    </li>
}

<ul class="nav" id="side-menu">
    <li>
        <a href="@Url.Action("Index", "Home")"><i class="fa fa-dashboard fa-fw"></i> @T("Admin.Dashboard")</a>
    </li>
    @{
        //standard (default) items
        var rootNode = siteMap.RootNode;
        
        //plugins
        var adminMenuPlugins = EngineContext.Current.Resolve<Nop.Core.Plugins.IPluginFinder>()
            .GetPlugins<IAdminMenuPlugin>()
            .ToList();
        foreach (var adminMenuPlugin in adminMenuPlugins)
        {
            adminMenuPlugin.ManageSiteMap(rootNode);
        }
        //"Plugins" menu item should be visible when it has some child nodes
        var pluginNode = rootNode.ChildNodes.FirstOrDefault(x => x.SystemName == "Third party plugins");
        if (pluginNode != null && pluginNode.Visible)
        {
            pluginNode.Visible = pluginNode.ChildNodes.Any(x => x.Visible);
        }
    }
    @foreach (var item in rootNode.ChildNodes.Where(x => x.Visible))
    {
        @RenderMenuItem(item)
    }
</ul>

